{"version":3,"sources":["api/index.ts","components/CodelogDialog.tsx","components/AddButton.tsx","components/CodelogItem.tsx","components/CSVExporter.tsx","components/Navbar.tsx","components/PaginationActions.tsx","components/AllCodelogs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["saveCodelog","codelogs","data","localStorage","setItem","JSON","stringify","getAllCodelogs","localData","getItem","parse","CodelogDialog","display","setDisplayDialog","handleClick","codelog","useState","canSave","setCanSave","open","setOpen","title","tasks","blockers","todayILearned","state","setState","useEffect","trim","length","handleClose","Dialog","onClose","maxWidth","aria-labelledby","DialogTitle","id","DialogContent","TextField","required","fullWidth","variant","autoFocus","margin","label","type","value","onChange","e","currentTarget","multiline","rowsMax","DialogActions","Button","onClick","color","parseInt","Math","random","toString","split","date","Date","disabled","useStyles","makeStyles","theme","createStyles","fab","position","bottom","spacing","right","AddButton","classes","displayDialog","Fragment","Fab","className","card","marginTop","avatar","backgroundColor","red","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","CodelogItem","handleDeleteClick","handleEditClick","expanded","setExpanded","editting","setEditting","Card","CardHeader","Avatar","aria-label","toLocaleUpperCase","titleTypographyProps","subheader","CardContent","map","line","index","Typography","key","component","CardActions","disableSpacing","style","green","IconButton","clsx","aria-expanded","Collapse","in","timeout","unmountOnExit","CSVExporter","codeLogs","Link","reverse","CloudDownload","root","flexGrow","menuButton","textAlign","NavbarStyled","styled","AppBar","Navbar","Toolbar","flexShrink","padding","PaginationActions","props","useTheme","count","page","onChangePage","Paper","event","direction","KeyboardArrowLeft","KeyboardArrowRight","ceil","codelogReducer","action","Object","assign","payload","filter","clog","initialState","AllCodelogs","useReducer","api","dispatch","setPage","Error","codelogIndex","findIndex","splice","editedCodelog","Container","slice","paddingTop","newPage","newCodelog","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAGMA,EAAc,SAACC,GAEnB,IAAMC,EAAiB,CAAED,YACzBE,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,KAgDrCK,EAAiB,WAC5B,IAAMC,EAAYL,aAAaM,QAAQ,YACvC,OAAOD,EAAYH,KAAKK,MAAMF,GAAa,CAAEP,SAAU,K,0GCmE1CU,EA/GO,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,iBAAkBC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAAc,EAC/CC,oBAAS,GADsC,mBACtEC,EADsE,KAC7DC,EAD6D,OAErDF,mBAASJ,GAF4C,mBAEtEO,EAFsE,KAEhEC,EAFgE,OAGnDJ,mBAAS,CACjCK,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,cAAe,KAP4D,mBAGtEC,EAHsE,KAG/DC,EAH+D,KAU7EC,qBAAU,WACJZ,GACFW,EAAS,eAAKX,MAEf,CAACA,IAEJY,qBAAU,WACRT,IAAaO,EAAMJ,MAAMO,OAAOC,OAAS,GAAKJ,EAAMH,MAAMM,OAAOC,OAAS,MACzE,CAACJ,IAEJ,IAOMK,EAAc,WAClBV,GAAQ,GACJP,GAAkBA,GAAiB,IAGzC,OACE,kBAACkB,EAAA,EAAD,CAAQZ,KAAMA,EAAMa,QAASF,EAAaG,SAAU,KAAMC,kBAAgB,uBACxE,kBAACC,EAAA,EAAD,CAAaC,GAAG,qBAAhB,mBACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,WAAS,EACTC,QAAQ,WACRC,WAAS,EACTC,OAAO,QACPP,GAAG,QACHQ,MAAM,QACNC,KAAK,OACLC,MAAOrB,EAAMJ,MACb0B,SAAU,SAACC,GAAD,OAAOtB,EAAS,2BAAKD,GAAN,IAAaJ,MAAO2B,EAAEC,cAAcH,YAE/D,kBAACR,EAAA,EAAD,CACEC,UAAQ,EACRC,WAAS,EACTU,WAAS,EACTC,QAAQ,IACRV,QAAQ,WACRE,OAAO,QACPP,GAAG,QACHQ,MAAM,QACNC,KAAK,OACLC,MAAOrB,EAAMH,MACbyB,SAAU,SAACC,GAAD,OAAOtB,EAAS,2BAAKD,GAAN,IAAaH,MAAO0B,EAAEC,cAAcH,YAE/D,kBAACR,EAAA,EAAD,CACEE,WAAS,EACTU,WAAS,EACTC,QAAQ,IACRV,QAAQ,WACRE,OAAO,QACPP,GAAG,WACHQ,MAAM,WACNC,KAAK,OACLC,MAAOrB,EAAMF,SACbwB,SAAU,SAACC,GAAD,OAAOtB,EAAS,2BAAKD,GAAN,IAAaF,SAAUyB,EAAEC,cAAcH,YAElE,kBAACR,EAAA,EAAD,CACEE,WAAS,EACTU,WAAS,EACTC,QAAQ,IACRV,QAAQ,WACRE,OAAO,QACPP,GAAG,gBACHQ,MAAM,kBACNC,KAAK,OACLC,MAAOrB,EAAMD,cACbuB,SAAU,SAACC,GAAD,OAAOtB,EAAS,2BAAKD,GAAN,IAAaD,cAAewB,EAAEC,cAAcH,aAGzE,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAASxB,EAAayB,MAAM,WAApC,UAGA,kBAACF,EAAA,EAAD,CAAQC,QAtEK,WACjBvC,EAAWA,EAAD,eAA8EU,GAA9E,2BAAgBA,GAAhB,IAAuBW,GDtB5BoB,SACLC,KAAKC,SACFC,WACAC,MAAM,KAAK,ICmBqCC,MAAM,IAAIC,MAAOH,aACpE7C,EAAYC,GACZK,GAAQ,GACJP,GAAkBA,GAAiB,IAkEN0C,MAAM,UAAUQ,SAAU9C,GAAvD,WC/FF+C,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,IAAK,CACHC,SAAU,WACVC,OAAQJ,EAAMK,QAAQ,GACtBC,MAAON,EAAMK,QAAQ,SAKZ,SAASE,EAAT,GAAqC,IAAhB3D,EAAe,EAAfA,YAC5B4D,EAAUV,IADiC,EAEPhD,oBAAS,GAFF,mBAE1C2D,EAF0C,KAE3B9D,EAF2B,KAIjDc,qBAAU,eAMV,OACE,kBAAC,IAAMiD,SAAP,KACE,6BACE,kBAACC,EAAA,EAAD,CAAKtB,MAAM,UAAUuB,UAAWJ,EAAQN,IAAKd,QAPzB,WACxBzC,GAAiB,KAOX,kBAAC,IAAD,OAED8D,GACC,kBAAC,EAAD,CACE/D,QAAS+D,EACT9D,iBAAkBA,EAClBC,YAAaA,M,6JC1BnBkD,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXY,KAAM,CACJC,UAAW,IAGbC,OAAQ,CACNC,gBAAiBC,IAAI,MAEvBC,OAAQ,CACNC,UAAW,eACXC,WAAY,OACZC,WAAYrB,EAAMsB,YAAYC,OAAO,YAAa,CAChDC,SAAUxB,EAAMsB,YAAYE,SAASC,YAGzCC,WAAY,CACVP,UAAW,kBAEbjB,IAAK,CACHzB,OAAQuB,EAAMK,QAAQ,SAmGbsB,EA9FK,SAAC,GAAqD,IAAnD9E,EAAkD,EAAlDA,QAAS+E,EAAyC,EAAzCA,kBAAmBC,EAAsB,EAAtBA,gBACzC3D,EAAoDrB,EAApDqB,GAAIyB,EAAgD9C,EAAhD8C,KAAMxC,EAA0CN,EAA1CM,MAAOC,EAAmCP,EAAnCO,MAAOC,EAA4BR,EAA5BQ,SAAUC,EAAkBT,EAAlBS,cAD6B,EAEvCR,oBAAS,GAF8B,mBAEhEgF,EAFgE,KAEtDC,EAFsD,OAGvCjF,oBAAS,GAH8B,mBAGhEkF,EAHgE,KAGtDC,EAHsD,KAIjEzB,EAAUV,IAMhB,OACE,kBAAC,IAAMY,SAAP,KACGsB,GAAY,kBAAC,EAAD,CAAetF,SAAS,EAAME,YAAaiF,EAAiBhF,QAASA,IAClF,kBAACqF,EAAA,EAAD,CAAMtB,UAAWJ,EAAQK,MACvB,kBAACsB,EAAA,EAAD,CACEpB,OACE,kBAACqB,EAAA,EAAD,CAAQC,aAAW,SAASzB,UAAWJ,EAAQO,QAC5C5D,EAAM,GAAGmF,qBAGdC,qBAAsB,CAAEhE,QAAS,MACjCpB,MAAOA,EACPqF,UAAW7C,IAEb,kBAAC8C,EAAA,EAAD,KACGrF,EAAMsC,MAAM,MAAMgD,KAAI,SAACC,EAAMC,GAAP,OACrB,kBAACC,EAAA,EAAD,CAAYC,IAAKF,EAAOrE,QAAQ,QAAQc,MAAM,gBAAgB0D,UAAU,KACrEJ,OAIP,kBAACK,EAAA,EAAD,CAAaC,gBAAc,GACzB,kBAACtC,EAAA,EAAD,CACEtB,MAAM,UACN6D,MAAO,CAAElC,gBAAiBmC,IAAM,MAChCvC,UAAWJ,EAAQN,IACnBmC,aAAW,eACXjD,QAAS,kBAAM6C,GAAaD,KAE5B,kBAAC,IAAD,OAEF,kBAACrB,EAAA,EAAD,CACEtB,MAAM,YACNuB,UAAWJ,EAAQN,IACnBmC,aAAW,iBACXjD,QAAS,kBAAMwC,EAAkB1D,KAEjC,kBAAC,IAAD,OAEF,kBAACkF,EAAA,EAAD,CACExC,UAAWyC,YAAK7C,EAAQU,OAAT,eAAoBV,EAAQkB,WAAaI,IACxD1C,QA7CgB,WACxB2C,GAAaD,IA6CLwB,gBAAexB,EACfO,aAAW,aAEX,kBAAC,IAAD,QAGJ,kBAACkB,EAAA,EAAD,CAAUC,GAAI1B,EAAU2B,QAAQ,OAAOC,eAAa,GAClD,kBAACjB,EAAA,EAAD,KACE,kBAACI,EAAA,EAAD,CAAYtE,QAAQ,MAApB,aACClB,EAASqC,MAAM,MAAMgD,KAAI,SAACC,EAAMC,GAAP,OACxB,kBAACC,EAAA,EAAD,CAAYC,IAAKF,EAAOrE,QAAQ,QAAQwE,UAAU,KAC/CJ,MAGL,6BACA,6BACA,6BACA,kBAACE,EAAA,EAAD,CAAYtE,QAAQ,MAApB,oBACCjB,EAAcoC,MAAM,MAAMgD,KAAI,SAACC,EAAMC,GAAP,OAC7B,kBAACC,EAAA,EAAD,CAAYC,IAAKF,EAAOrE,QAAQ,QAAQwE,UAAU,KAC/CJ,W,qDCtGF,SAASgB,IACtB,IAAMC,EAAWvH,IAAiBN,SAElC,OAAK6H,EAASjG,OAGZ,kBAACkG,EAAA,EAAD,CAAMd,UAAU,SAASxE,QAAQ,QAAQ2E,MAAO,CAAE7D,MAAO,YACvD,kBAAC,UAAD,CAASrD,KAAM4H,EAASE,WACtB,kBAACC,EAAA,EAAD,CAAeb,MAAO,CAAE7D,MAAO,eALR,qCCH/B,IAAMS,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACX+D,KAAM,CACJC,SAAU,GAEZC,WAAY,CACV9C,WAAYpB,EAAMK,QAAQ,IAE5BlD,MAAO,CACL8G,SAAU,EACVE,UAAW,eAMXC,GAAeC,YAAOC,IAAPD,CAAe,CAClCrD,gBAAiB,YAGJ,SAASuD,KACtB,IAAM/D,EAAUV,KAEhB,OACE,yBAAKc,UAAWJ,EAAQwD,MACtB,kBAACI,GAAD,CAAcjE,SAAS,UACrB,kBAACqE,EAAA,EAAD,KACE,kBAAC3B,EAAA,EAAD,CAAYtE,QAAQ,KAAKqC,UAAWJ,EAAQrD,OAA5C,YAGA,kBAACwG,EAAD,S,0CC5BJ7D,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCgE,KAAM,CACJS,WAAY,EACZC,QAAS1E,EAAMK,QAAQ,SA4CZsE,GAxCW,SAACC,GACzB,IAAMpE,EAAUV,KACVE,EAAQ6E,eACNC,EAA8BF,EAA9BE,MAAOC,EAAuBH,EAAvBG,KAAMC,EAAiBJ,EAAjBI,aAUrB,OACE,6BACE,kBAACC,GAAA,EAAD,CAAOrE,UAAWJ,EAAQwD,MACxB,kBAACZ,EAAA,EAAD,CACEhE,QAZsB,SAAC8F,GAC7BF,EAAaE,EAAOH,EAAO,IAYrBlF,SAAmB,IAATkF,EACV1C,aAAW,iBAEU,QAApBrC,EAAMmF,UAAsB,kBAACC,GAAA,EAAD,MAAwB,kBAACC,GAAA,EAAD,OAEvD,kBAACjC,EAAA,EAAD,CACEhE,QAfsB,SAAC8F,GAC7BF,EAAaE,EAAOH,EAAO,IAerBlF,SAAUkF,GAAQxF,KAAK+F,KAAKR,EAlCT,GAkCkC,EACrDzC,aAAW,aAEU,QAApBrC,EAAMmF,UAAsB,kBAACC,GAAA,EAAD,MAAwB,kBAACC,GAAA,EAAD,UCGzDE,GAAiB,SAAChI,EAAiBiI,GACvC,OAAQA,EAAO7G,MACb,IAtCiB,eAuCf,OAAO8G,OAAOC,OAAO,GAAInI,EAAO,CAAExB,SAAS,YAAKwB,EAAMxB,YACxD,IAvCoB,kBAwClB,MAAO,CAAEA,SAAS,CAAEyJ,EAAOG,SAAV,mBAAsBpI,EAAMxB,YAC/C,IAvCmB,iBAwCjB,OAAO0J,OAAOC,OAAO,GAAInI,EAAO,CAC9BxB,SAAS,YAAKwB,EAAMxB,SAAS6J,QAAO,SAAC/I,GAAD,OAAaA,EAAQqB,KAAOsH,EAAOG,cAE3E,IA1CiB,eA2Cf,OAAOF,OAAOC,OAAO,GAAInI,EAAO,CAC9BxB,SAAS,YACJwB,EAAMxB,SAAS2G,KAAI,SAACmD,GAAD,OAAWA,EAAK3H,KAAOsH,EAAOG,QAAQzH,GAAKsH,EAAOG,QAAUE,QAGxF,QACE,OAAOtI,IAKPuI,GAAyB,CAAE/J,SAAU,IAoD5BgK,GAlDK,WAAoB,IAAD,EACXC,qBAAWT,GAAgBO,IAAc,kBAAMG,OADpC,mBAC9B1I,EAD8B,KACvB2I,EADuB,OAEbpJ,mBAAS,GAFI,mBAE9BiI,EAF8B,KAExBoB,EAFwB,KAS/BvE,EAAoB,SAAC1D,IPnDA,SAACA,GAC5B,IAAMnC,EAAWM,IAAiBN,SAElC,IAAKA,EAAU,MAAM,IAAIqK,MAAM,qBAE/B,IAAMC,EAAetK,EAASuK,WAAU,SAACzJ,GAAD,OAAaA,EAAQqB,KAAOA,KACpE,IAAsB,IAAlBmI,EAAqB,MAAM,IAAID,MAAM,gBAEzCrK,EAASwK,OAAOF,EAAc,GAC9BvK,EAAY,YAAIC,IACT,YAAIA,GO0CTkK,CAAkB/H,GAClBgI,EAAS,CAAEP,QAASzH,EAAIS,KApEL,oBAuEfkD,EAAkB,SAAChF,GACvB,IAAM2J,EP5CiB,SAAC3J,GAC1B,IAAMd,EAAWM,IAAiBN,SAElC,IAAKA,EAAU,MAAM,IAAIqK,MAAM,qBAE/B,IAAMC,EAAetK,EAASuK,WAAU,SAACT,GAAD,OAAUA,EAAK3H,KAAOrB,EAAQqB,MACtE,IAAsB,IAAlBmI,EAAqB,MAAM,IAAID,MAAM,gBAIzC,OAFArK,EAASsK,GAAgBxJ,EACzBf,EAAY,YAAIC,IACTA,EAASsK,GOkCQJ,CAAgBpJ,GACtCqJ,EAAS,CAAEP,QAASa,EAAe7H,KAxElB,kBA+EnB,OACE,6BACE,kBAAC8H,EAAA,EAAD,KACE,kBAAClC,GAAD,MACChH,EAAMxB,SACJ2K,MD5FkB,EC4FZ3B,ED5FY,EC4FUA,ED5FV,GC6FlBrC,KAAI,SAAC7F,GAAD,OACH,kBAAC,EAAD,CACEiG,IAAKjG,EAAQqB,GACbrB,QAASA,EACT+E,kBAAmBA,EACnBC,gBAAiBA,QAIzB,kBAAC4E,EAAA,EAAD,CAAWvD,MAAO,CAAEyD,WAAY,MAC9B,kBAAC,GAAD,CACE5B,KAAMA,EACND,MAAOvH,EAAMxB,SAAS4B,OACtBqH,aAvBiB,SAACE,EAA4C0B,GACpET,EAAQS,OAyBN,kBAACrG,EAAD,CAAW3D,YAzCQ,SAACC,GACtB,IAAMgK,EPzDmB,SAAChK,GAC5B,IAAMd,EAAWM,IAAiBN,SAElC,OADAD,EAAY,CAACe,GAAF,mBAAcd,KAClBc,EOsDcoJ,CAAkBpJ,GACrCqJ,EAAS,CAAEvH,KAjES,kBAiEcgH,QAASkB,SCrEhCC,GAJO,WACpB,OAAO,kBAAC,GAAD,O,MCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9c3d20ae.chunk.js","sourcesContent":["import { Codelog, Codelogs } from '../types'\n\n// private\nconst saveCodelog = (codelogs: Codelog[]) => {\n  // deleteAll()\n  const data: Codelogs = { codelogs }\n  localStorage.setItem('codelogs', JSON.stringify(data))\n}\n\n// public\nexport const generateId = (): number => {\n  return parseInt(\n    Math.random()\n      .toString()\n      .split('.')[1]\n  )\n}\n\nexport const addNewCodelog = (codelog: Codelog): Codelog => {\n  const codelogs = getAllCodelogs().codelogs\n  saveCodelog([codelog, ...codelogs])\n  return codelog\n}\n\nexport const deleteAll = () => {\n  localStorage.clear()\n}\n\nexport const deleteCodelog = (id: number) => {\n  const codelogs = getAllCodelogs().codelogs\n\n  if (!codelogs) throw new Error('Database is empty')\n\n  const codelogIndex = codelogs.findIndex((codelog) => codelog.id === id)\n  if (codelogIndex === -1) throw new Error('id not found')\n\n  codelogs.splice(codelogIndex, 1)\n  saveCodelog([...codelogs])\n  return [...codelogs]\n}\n\nexport const editCodelog = (codelog: Codelog): Codelog => {\n  const codelogs = getAllCodelogs().codelogs\n\n  if (!codelogs) throw new Error('Database is empty')\n\n  const codelogIndex = codelogs.findIndex((clog) => clog.id === codelog.id)\n  if (codelogIndex === -1) throw new Error('id not found')\n\n  codelogs[codelogIndex] = codelog\n  saveCodelog([...codelogs])\n  return codelogs[codelogIndex]\n}\n\nexport const getAllCodelogs = (): Codelogs => {\n  const localData = localStorage.getItem('codelogs')\n  return localData ? JSON.parse(localData) : { codelogs: [] }\n}\n\nexport const getCodelogById = (id: number): Codelog => {\n  const codelogs = getAllCodelogs().codelogs\n\n  if (!codelogs) throw new Error('Database is empty')\n\n  const codelogIndex = codelogs.findIndex((codelog) => codelog.id === id)\n  if (codelogIndex === -1) {\n    throw new Error('id not found')\n  }\n\n  return codelogs[codelogIndex]\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField\n} from '@material-ui/core/'\nimport PropTypes from 'prop-types'\nimport React, { useEffect, useState } from 'react'\nimport { generateId } from '../api'\n\nconst CodelogDialog = ({ display, setDisplayDialog, handleClick, codelog }) => {\n  const [canSave, setCanSave] = useState(true)\n  const [open, setOpen] = useState(display)\n  const [state, setState] = useState({\n    title: '',\n    tasks: '',\n    blockers: '',\n    todayILearned: ''\n  })\n\n  useEffect(() => {\n    if (codelog) {\n      setState({ ...codelog })\n    }\n  }, [codelog])\n\n  useEffect(() => {\n    setCanSave(!(state.title.trim().length > 0 && state.tasks.trim().length > 0))\n  }, [state])\n\n  const handleSave = () => {\n    codelog = !codelog ? { ...state, id: generateId(), date: new Date().toString() } : { ...state }\n    handleClick(codelog)\n    setOpen(false)\n    if (setDisplayDialog) setDisplayDialog(false)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n    if (setDisplayDialog) setDisplayDialog(false)\n  }\n\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth={'xl'} aria-labelledby=\"codelog-form-dialog\">\n      <DialogTitle id=\"add-codelog-title\">Add new Codelog</DialogTitle>\n      <DialogContent>\n        <TextField\n          required\n          fullWidth\n          variant=\"outlined\"\n          autoFocus\n          margin=\"dense\"\n          id=\"title\"\n          label=\"Title\"\n          type=\"text\"\n          value={state.title}\n          onChange={(e) => setState({ ...state, title: e.currentTarget.value })}\n        />\n        <TextField\n          required\n          fullWidth\n          multiline\n          rowsMax=\"5\"\n          variant=\"outlined\"\n          margin=\"dense\"\n          id=\"tasks\"\n          label=\"Tasks\"\n          type=\"text\"\n          value={state.tasks}\n          onChange={(e) => setState({ ...state, tasks: e.currentTarget.value })}\n        />\n        <TextField\n          fullWidth\n          multiline\n          rowsMax=\"5\"\n          variant=\"outlined\"\n          margin=\"dense\"\n          id=\"blockers\"\n          label=\"Blockers\"\n          type=\"text\"\n          value={state.blockers}\n          onChange={(e) => setState({ ...state, blockers: e.currentTarget.value })}\n        />\n        <TextField\n          fullWidth\n          multiline\n          rowsMax=\"5\"\n          variant=\"outlined\"\n          margin=\"dense\"\n          id=\"todayILearned\"\n          label=\"Today I learned\"\n          type=\"text\"\n          value={state.todayILearned}\n          onChange={(e) => setState({ ...state, todayILearned: e.currentTarget.value })}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSave} color=\"primary\" disabled={canSave}>\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\nCodelogDialog.propTypes = {\n  display: PropTypes.bool.isRequired,\n  setDisplayDialog: PropTypes.func,\n  handleClick: PropTypes.func.isRequired,\n  codelog: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    date: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    tasks: PropTypes.string.isRequired,\n    blockers: PropTypes.string,\n    todayILearned: PropTypes.string\n  })\n}\n\nexport default CodelogDialog\n","import { Fab } from '@material-ui/core'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Add from '@material-ui/icons/Add'\nimport PropTypes from 'prop-types'\nimport React, { useEffect, useState } from 'react'\nimport CodelogDialog from './CodelogDialog'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fab: {\n      position: 'absolute',\n      bottom: theme.spacing(2),\n      right: theme.spacing(2)\n    }\n  })\n)\n\nexport default function AddButton({ handleClick }) {\n  const classes = useStyles()\n  const [displayDialog, setDisplayDialog] = useState(false)\n\n  useEffect(() => {})\n\n  const handleButtonClick = () => {\n    setDisplayDialog(true)\n  }\n\n  return (\n    <React.Fragment>\n      <div>\n        <Fab color=\"primary\" className={classes.fab} onClick={handleButtonClick}>\n          <Add />\n        </Fab>\n        {displayDialog && (\n          <CodelogDialog\n            display={displayDialog}\n            setDisplayDialog={setDisplayDialog}\n            handleClick={handleClick}\n          />\n        )}\n      </div>\n    </React.Fragment>\n  )\n}\nAddButton.propTypes = {\n  handleClick: PropTypes.func.isRequired\n}\n","import { Avatar, Card, CardActions, CardContent, CardHeader, Collapse, Fab, IconButton, Typography } from '@material-ui/core/'\nimport { green, red } from '@material-ui/core/colors'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport EditIcon from '@material-ui/icons/Edit'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport React, { useState } from 'react'\nimport CodelogDialog from './CodelogDialog'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      marginTop: 30\n      // maxWidth: 545\n    },\n    avatar: {\n      backgroundColor: red[500]\n    },\n    expand: {\n      transform: 'rotate(0deg)',\n      marginLeft: 'auto',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    expandOpen: {\n      transform: 'rotate(180deg)'\n    },\n    fab: {\n      margin: theme.spacing(1)\n    }\n  })\n)\n\nconst CodelogItem = ({ codelog, handleDeleteClick, handleEditClick }) => {\n  const { id, date, title, tasks, blockers, todayILearned } = codelog\n  const [expanded, setExpanded] = useState(false)\n  const [editting, setEditting] = useState(false)\n  const classes = useStyles()\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded)\n  }\n\n  return (\n    <React.Fragment>\n      {editting && <CodelogDialog display={true} handleClick={handleEditClick} codelog={codelog} />}\n      <Card className={classes.card}>\n        <CardHeader\n          avatar={\n            <Avatar aria-label=\"letter\" className={classes.avatar}>\n              {title[0].toLocaleUpperCase()}\n            </Avatar>\n          }\n          titleTypographyProps={{ variant: 'h6' }}\n          title={title}\n          subheader={date}\n        />\n        <CardContent>\n          {tasks.split('\\n').map((line, index) => (\n            <Typography key={index} variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {line}\n            </Typography>\n          ))}\n        </CardContent>\n        <CardActions disableSpacing>\n          <Fab\n            color=\"primary\"\n            style={{ backgroundColor: green[500] }}\n            className={classes.fab}\n            aria-label=\"Edit codelog\"\n            onClick={() => setEditting(!editting)}\n          >\n            <EditIcon />\n          </Fab>\n          <Fab\n            color=\"secondary\"\n            className={classes.fab}\n            aria-label=\"Delete codelog\"\n            onClick={() => handleDeleteClick(id)}\n          >\n            <DeleteIcon />\n          </Fab>\n          <IconButton\n            className={clsx(classes.expand, { [classes.expandOpen]: expanded })}\n            onClick={handleExpandClick}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        </CardActions>\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <CardContent>\n            <Typography variant=\"h6\">Blockers:</Typography>\n            {blockers.split('\\n').map((line, index) => (\n              <Typography key={index} variant=\"body1\" component=\"p\">\n                {line}\n              </Typography>\n            ))}\n            <br />\n            <hr />\n            <br />\n            <Typography variant=\"h6\">Today I learned:</Typography>\n            {todayILearned.split('\\n').map((line, index) => (\n              <Typography key={index} variant=\"body1\" component=\"p\">\n                {line}\n              </Typography>\n            ))}\n          </CardContent>\n        </Collapse>\n      </Card>\n    </React.Fragment>\n  )\n}\nCodelogItem.propTypes = {\n  codelog: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    date: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    tasks: PropTypes.string.isRequired,\n    blockers: PropTypes.string,\n    todayILearned: PropTypes.string\n  }).isRequired,\n  handleDeleteClick: PropTypes.func,\n  handleEditClick: PropTypes.func\n}\n\nexport default CodelogItem\n","import React from 'react'\nimport { Link } from '@material-ui/core'\nimport { CloudDownload } from '@material-ui/icons'\nimport { CSVLink } from 'react-csv'\nimport { getAllCodelogs } from '../api'\n\nexport default function CSVExporter() {\n  const codeLogs = getAllCodelogs().codelogs\n\n  if (!codeLogs.length) return <></>\n\n  return (\n    <Link component=\"button\" variant=\"body2\" style={{ color: '#ab003c' }}>\n      <CSVLink data={codeLogs.reverse()}>\n        <CloudDownload style={{ color: '#fce4ec' }} />\n      </CSVLink>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core/'\nimport { createStyles, makeStyles, styled, Theme } from '@material-ui/core/styles'\nimport CSVExporter from './CSVExporter'\n\n//#region  useStyles\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginLeft: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1,\n      textAlign: 'center'\n    }\n  })\n)\n//#endregion\n\nconst NavbarStyled = styled(AppBar)({\n  backgroundColor: '#FE6B8B'\n})\n\nexport default function Navbar() {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <NavbarStyled position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Codelogs\n          </Typography>\n          <CSVExporter />\n        </Toolbar>\n      </NavbarStyled>\n    </div>\n  )\n}\n","import { IconButton, Paper } from '@material-ui/core'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport { KeyboardArrowLeft, KeyboardArrowRight } from '@material-ui/icons'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nexport const ROWS_PER_PAGE = 3\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    padding: theme.spacing(0.5)\n  }\n}))\n\nconst PaginationActions = (props) => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const { count, page, onChangePage } = props\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1)\n  }\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1)\n  }\n\n  return (\n    <div>\n      <Paper className={classes.root}>\n        <IconButton\n          onClick={handleBackButtonClick}\n          disabled={page === 0}\n          aria-label=\"previous page\"\n        >\n          {theme.direction === 'ltr' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n        </IconButton>\n        <IconButton\n          onClick={handleNextButtonClick}\n          disabled={page >= Math.ceil(count / ROWS_PER_PAGE) - 1}\n          aria-label=\"next page\"\n        >\n          {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n        </IconButton>\n      </Paper>\n    </div>\n  )\n}\nPaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired\n}\n\nexport default PaginationActions\n","import { Container } from '@material-ui/core/'\nimport React, { useReducer, useState } from 'react'\nimport * as api from '../api'\nimport { Codelog, Codelogs } from '../types'\nimport AddButton from './AddButton'\nimport CodelogItem from './CodelogItem'\nimport Navbar from './Navbar'\nimport PaginationActions, { ROWS_PER_PAGE } from './PaginationActions'\n\n//#region reducer stuff\nconst ALL_CODELOGS = 'ALL_CODELOGS'\nconst ADD_NEW_CODELOG = 'ADD_NEW_CODELOG'\nconst DELETE_ALL_CODELOGS = 'DELETE_ALL_CODELOGS'\nconst DELETE_CODELOG = 'DELETE_CODELOG'\nconst EDIT_CODELOG = 'EDIT_CODELOG'\n\ntype AllCodelogType = {\n  type: typeof ALL_CODELOGS\n}\n\ntype AddNewCodelogType = {\n  type: typeof ADD_NEW_CODELOG\n  payload: Codelog\n}\n\ntype DeleteAllCodelogsType = {\n  type: typeof DELETE_ALL_CODELOGS\n}\n\ntype DeleteCodelogType = {\n  type: typeof DELETE_CODELOG\n  payload: number\n}\n\ntype EditCodelogType = {\n  type: typeof EDIT_CODELOG\n  payload: Codelog\n}\n\ntype ActionTypes =\n  | AllCodelogType\n  | AddNewCodelogType\n  | DeleteAllCodelogsType\n  | DeleteCodelogType\n  | EditCodelogType\n\nconst codelogReducer = (state: Codelogs, action: ActionTypes) => {\n  switch (action.type) {\n    case ALL_CODELOGS:\n      return Object.assign({}, state, { codelogs: [...state.codelogs] })\n    case ADD_NEW_CODELOG:\n      return { codelogs: [action.payload, ...state.codelogs] }\n    case DELETE_CODELOG:\n      return Object.assign({}, state, {\n        codelogs: [...state.codelogs.filter((codelog) => codelog.id !== action.payload)]\n      })\n    case EDIT_CODELOG:\n      return Object.assign({}, state, {\n        codelogs: [\n          ...state.codelogs.map((clog) => (clog.id === action.payload.id ? action.payload : clog))\n        ]\n      })\n    default:\n      return state\n  }\n}\n//#endregion\n\nconst initialState: Codelogs = { codelogs: [] }\n\nconst AllCodelogs = (): JSX.Element => {\n  const [state, dispatch] = useReducer(codelogReducer, initialState, () => api.getAllCodelogs())\n  const [page, setPage] = useState(0)\n\n  const handleAddClick = (codelog: Codelog) => {\n    const newCodelog = api.addNewCodelog(codelog)\n    dispatch({ type: ADD_NEW_CODELOG, payload: newCodelog })\n  }\n\n  const handleDeleteClick = (id: number) => {\n    api.deleteCodelog(id)\n    dispatch({ payload: id, type: DELETE_CODELOG })\n  }\n\n  const handleEditClick = (codelog: Codelog) => {\n    const editedCodelog = api.editCodelog(codelog)\n    dispatch({ payload: editedCodelog, type: EDIT_CODELOG })\n  }\n\n  const handleChangePage = (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => {\n    setPage(newPage)\n  }\n\n  return (\n    <div>\n      <Container>\n        <Navbar />\n        {state.codelogs\n          .slice(page * ROWS_PER_PAGE, page * ROWS_PER_PAGE + ROWS_PER_PAGE)\n          .map((codelog) => (\n            <CodelogItem\n              key={codelog.id}\n              codelog={codelog}\n              handleDeleteClick={handleDeleteClick}\n              handleEditClick={handleEditClick}\n            />\n          ))}\n      </Container>\n      <Container style={{ paddingTop: 7.5 }}>\n        <PaginationActions\n          page={page}\n          count={state.codelogs.length}\n          onChangePage={handleChangePage}\n        />\n      </Container>\n      <AddButton handleClick={handleAddClick} />\n    </div>\n  )\n}\n\nexport default AllCodelogs\n","import React from 'react'\nimport AllCodelogs from './components/AllCodelogs'\n\nconst App: React.FC = () => {\n  return <AllCodelogs />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}